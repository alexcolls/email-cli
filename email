#!/bin/bash

# Temporary Email CLI Manager
# Manages temporary email addresses using various services

VERSION="1.1.0"
DATA_DIR="$HOME/.config/tempmail"
EMAIL_LIST="$DATA_DIR/emails.json"
CURRENT_EMAIL="$DATA_DIR/current_email"
ENV_FILE="$DATA_DIR/.env"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Initialize data directory
init_data_dir() {
    mkdir -p "$DATA_DIR"
    if [ ! -f "$EMAIL_LIST" ]; then
        echo "[]" > "$EMAIL_LIST"
    fi
}

# Load environment variables
load_env() {
    if [ -f "$ENV_FILE" ]; then
        export $(grep -v '^#' "$ENV_FILE" | xargs)
    fi
}

# Print colored message
print_msg() {
    local color=$1
    shift
    echo -e "${color}$@${NC}"
}

# Generate random email name
generate_random_name() {
    local adjectives=("swift" "brave" "clever" "bright" "cosmic" "digital" "electric" "frozen" "golden" "happy")
    local nouns=("tiger" "falcon" "dragon" "phoenix" "wolf" "eagle" "lion" "shark" "panda" "cobra")
    local adj=${adjectives[$RANDOM % ${#adjectives[@]}]}
    local noun=${nouns[$RANDOM % ${#nouns[@]}]}
    local num=$((RANDOM % 999))
    echo "${adj}${noun}${num}"
}

# Check if email exists in list
email_exists() {
    local email=$1
    jq -e --arg email "$email" '.[] | select(.email == $email)' "$EMAIL_LIST" > /dev/null 2>&1
}

# Create new temporary email using 1secmail.com API
create_email() {
    print_msg "$BLUE" "üéØ Creating temporary email address..."
    
    local username=""
    
    # Ask for custom name or generate random
    read -p "Enter email name (leave empty for random): " custom_name
    
    if [ -z "$custom_name" ]; then
        username=$(generate_random_name)
    else
        username="$custom_name"
    fi
    
    # Get available domains from 1secmail
    local domains=$(curl -s "https://www.1secmail.com/api/v1/?action=getDomainList" | jq -r '.[]' | head -5)
    
    if [ -z "$domains" ]; then
        print_msg "$RED" "‚ùå Failed to fetch domains. Using default domain."
        domains="1secmail.com"
    fi
    
    # Select first domain
    local domain=$(echo "$domains" | head -1)
    local email="${username}@${domain}"
    
    # Check if email already exists in our list
    if email_exists "$email"; then
        print_msg "$YELLOW" "‚ö†Ô∏è  Email already exists in your list!"
        read -p "Do you want to create another one? (y/n): " response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            create_email
            return
        else
            return 1
        fi
    fi
    
    # Save email to list
    local timestamp=$(date +%s)
    local entry=$(jq -n \
        --arg email "$email" \
        --arg username "$username" \
        --arg domain "$domain" \
        --arg created "$(date -Iseconds)" \
        --arg timestamp "$timestamp" \
        '{email: $email, username: $username, domain: $domain, created: $created, timestamp: $timestamp}')
    
    jq --argjson entry "$entry" '. += [$entry]' "$EMAIL_LIST" > "$EMAIL_LIST.tmp" && mv "$EMAIL_LIST.tmp" "$EMAIL_LIST"
    
    # Set as current email
    echo "$email" > "$CURRENT_EMAIL"
    
    print_msg "$GREEN" "‚úÖ Email created successfully!"
    print_msg "$GREEN" "üìß Email: $email"
    print_msg "$BLUE" "üíæ Saved to list and set as current"
}

# List all emails
list_emails() {
    print_msg "$BLUE" "üìã Your temporary email addresses:"
    echo ""
    
    local count=$(jq 'length' "$EMAIL_LIST")
    
    if [ "$count" -eq 0 ]; then
        print_msg "$YELLOW" "No emails found. Create one with: tempmail create"
        return
    fi
    
    local current=""
    if [ -f "$CURRENT_EMAIL" ]; then
        current=$(cat "$CURRENT_EMAIL")
    fi
    
    jq -r '.[] | "\(.email)|\(.created)"' "$EMAIL_LIST" | while IFS='|' read -r email created; do
        if [ "$email" = "$current" ]; then
            print_msg "$GREEN" "‚û§ $email (current) - Created: $created"
        else
            echo "  $email - Created: $created"
        fi
    done
}

# Delete email
delete_email() {
    local email=$1
    
    if [ -z "$email" ]; then
        print_msg "$RED" "‚ùå Please specify an email to delete"
        echo "Usage: tempmail delete <email>"
        return 1
    fi
    
    if ! email_exists "$email"; then
        print_msg "$RED" "‚ùå Email not found in list"
        return 1
    fi
    
    jq --arg email "$email" 'map(select(.email != $email))' "$EMAIL_LIST" > "$EMAIL_LIST.tmp" && mv "$EMAIL_LIST.tmp" "$EMAIL_LIST"
    
    # Clear current email if it was deleted
    if [ -f "$CURRENT_EMAIL" ] && [ "$(cat "$CURRENT_EMAIL")" = "$email" ]; then
        rm "$CURRENT_EMAIL"
    fi
    
    print_msg "$GREEN" "‚úÖ Email deleted: $email"
}

# Check inbox for current email
check_inbox() {
    local email=""
    
    if [ -n "$1" ]; then
        email="$1"
    elif [ -f "$CURRENT_EMAIL" ]; then
        email=$(cat "$CURRENT_EMAIL")
    else
        print_msg "$RED" "‚ùå No email specified and no current email set"
        echo "Usage: tempmail inbox [email]"
        return 1
    fi
    
    # Extract username and domain
    local username=$(echo "$email" | cut -d'@' -f1)
    local domain=$(echo "$email" | cut -d'@' -f2)
    
    print_msg "$BLUE" "üì¨ Checking inbox for: $email"
    echo ""
    
    # Fetch messages
    local messages=$(curl -s "https://www.1secmail.com/api/v1/?action=getMessages&login=$username&domain=$domain")
    
    local count=$(echo "$messages" | jq 'length')
    
    if [ "$count" -eq 0 ]; then
        print_msg "$YELLOW" "üì≠ No messages found"
        return
    fi
    
    print_msg "$GREEN" "üì® Found $count message(s):"
    echo ""
    
    echo "$messages" | jq -r '.[] | "ID: \(.id)\nFrom: \(.from)\nSubject: \(.subject)\nDate: \(.date)\n---"'
}

# Read specific email
read_email() {
    local email_id=$1
    local email=""
    
    if [ -z "$email_id" ]; then
        print_msg "$RED" "‚ùå Please specify an email ID"
        echo "Usage: tempmail read <id> [email]"
        return 1
    fi
    
    if [ -n "$2" ]; then
        email="$2"
    elif [ -f "$CURRENT_EMAIL" ]; then
        email=$(cat "$CURRENT_EMAIL")
    else
        print_msg "$RED" "‚ùå No email specified and no current email set"
        return 1
    fi
    
    local username=$(echo "$email" | cut -d'@' -f1)
    local domain=$(echo "$email" | cut -d'@' -f2)
    
    print_msg "$BLUE" "üìñ Reading email ID: $email_id from $email"
    echo ""
    
    local message=$(curl -s "https://www.1secmail.com/api/v1/?action=readMessage&login=$username&domain=$domain&id=$email_id")
    
    echo "$message" | jq -r '"From: \(.from)\nTo: \(.to)\nSubject: \(.subject)\nDate: \(.date)\n\n\(.textBody)"'
}

# Set current email
set_current() {
    local email=$1
    
    if [ -z "$email" ]; then
        print_msg "$RED" "‚ùå Please specify an email"
        echo "Usage: tempmail use <email>"
        return 1
    fi
    
    # Try exact match first
    if email_exists "$email"; then
        echo "$email" > "$CURRENT_EMAIL"
        print_msg "$GREEN" "‚úÖ Current email set to: $email"
        return 0
    fi
    
    # Try partial match (username part)
    local matches=$(jq -r --arg pattern "$email" '.[] | select(.email | contains($pattern)) | .email' "$EMAIL_LIST")
    local match_count=$(echo "$matches" | grep -c .)
    
    if [ "$match_count" -eq 0 ]; then
        print_msg "$RED" "‚ùå Email not found in list"
        return 1
    elif [ "$match_count" -eq 1 ]; then
        local found_email="$matches"
        echo "$found_email" > "$CURRENT_EMAIL"
        print_msg "$GREEN" "‚úÖ Current email set to: $found_email"
        return 0
    else
        print_msg "$YELLOW" "‚ö†Ô∏è  Multiple matches found:"
        echo "$matches" | nl
        print_msg "$YELLOW" "Please be more specific or use the full email address"
        return 1
    fi
}

# Show current email
show_current() {
    if [ -f "$CURRENT_EMAIL" ]; then
        local email=$(cat "$CURRENT_EMAIL")
        print_msg "$GREEN" "üìß Current email: $email"
    else
        print_msg "$YELLOW" "‚ö†Ô∏è  No current email set"
    fi
}

# Send email
send_email() {
    load_env
    
    # Check if sending is configured
    if [ -z "$SMTP_HOST" ] || [ -z "$SMTP_USER" ] || [ -z "$SMTP_PASS" ]; then
        print_msg "$YELLOW" "‚ö†Ô∏è  Email sending not configured!"
        echo ""
        print_msg "$BLUE" "To enable sending, create: $ENV_FILE"
        print_msg "$BLUE" "With the following variables:"
        echo "  SMTP_HOST=smtp.gmail.com"
        echo "  SMTP_PORT=587"
        echo "  SMTP_USER=your-email@gmail.com"
        echo "  SMTP_PASS=your-app-password"
        echo "  FROM_NAME=Your Name"
        echo ""
        print_msg "$BLUE" "üí° For Gmail: Use an App Password (https://myaccount.google.com/apppasswords)"
        print_msg "$BLUE" "üí° Or use SendGrid, Mailgun, etc. (all have free tiers)"
        return 1
    fi
    
    local from_email=""
    local to_email="$1"
    local subject="$2"
    local body="$3"
    
    # Get from email
    if [ -f "$CURRENT_EMAIL" ]; then
        from_email=$(cat "$CURRENT_EMAIL")
    fi
    
    # Interactive mode if arguments missing
    if [ -z "$to_email" ]; then
        read -p "To: " to_email
    fi
    
    if [ -z "$to_email" ]; then
        print_msg "$RED" "‚ùå Recipient email is required"
        return 1
    fi
    
    if [ -z "$subject" ]; then
        read -p "Subject: " subject
    fi
    
    if [ -z "$body" ]; then
        print_msg "$BLUE" "üìù Enter message body (press Ctrl+D when done):"
        body=$(cat)
    fi
    
    print_msg "$BLUE" "üì§ Sending email..."
    
    # Use Python to send email (works on most systems)
    python3 - <<PYEOF
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os
import sys

try:
    smtp_host = "${SMTP_HOST}"
    smtp_port = int("${SMTP_PORT:-587}")
    smtp_user = "${SMTP_USER}"
    smtp_pass = "${SMTP_PASS}"
    from_name = "${FROM_NAME:-Temporary Email}"
    from_email = "${SMTP_USER}"  # Use SMTP user as sender
    
    msg = MIMEMultipart()
    msg['From'] = f"{from_name} <{from_email}>"
    msg['To'] = "${to_email}"
    msg['Subject'] = "${subject}"
    
    # Add reply-to if using temp email
    if "$from_email":
        msg['Reply-To'] = "$from_email"
    
    body_text = """${body}"""
    msg.attach(MIMEText(body_text, 'plain'))
    
    # Connect and send
    with smtplib.SMTP(smtp_host, smtp_port) as server:
        server.starttls()
        server.login(smtp_user, smtp_pass)
        server.send_message(msg)
    
    print("SUCCESS")
except Exception as e:
    print(f"ERROR: {str(e)}", file=sys.stderr)
    sys.exit(1)
PYEOF
    
    if [ $? -eq 0 ]; then
        print_msg "$GREEN" "‚úÖ Email sent successfully!"
        print_msg "$GREEN" "   To: $to_email"
        print_msg "$GREEN" "   Subject: $subject"
    else
        print_msg "$RED" "‚ùå Failed to send email"
        print_msg "$YELLOW" "üí° Check your SMTP credentials in $ENV_FILE"
        return 1
    fi
}

# Clear all emails
clear_all() {
    read -p "Are you sure you want to delete ALL emails? (yes/no): " confirm
    if [ "$confirm" = "yes" ]; then
        echo "[]" > "$EMAIL_LIST"
        rm -f "$CURRENT_EMAIL"
        print_msg "$GREEN" "‚úÖ All emails cleared"
    else
        print_msg "$YELLOW" "‚ùå Operation cancelled"
    fi
}

# Show help
show_help() {
    cat << HELP
Temporary Email CLI Manager v${VERSION}

Usage: tempmail <command> [options]

Commands:
  create              Create a new temporary email address
  list                List all your temporary emails
  delete <email>      Delete a specific email from your list
  inbox [email]       Check inbox (uses current email if not specified)
  read <id> [email]   Read a specific email by ID
  send [to] [subject] [body]  Send an email (interactive if args omitted)
  use <email>         Set an email as current
  current             Show current email
  clear               Delete all emails from list
  help                Show this help message

Examples:
  tempmail create
  tempmail list
  tempmail inbox
  tempmail read 12345
  tempmail send friend@example.com "Hello" "How are you?"
  tempmail send  (interactive mode)
  tempmail delete user@domain.com
  tempmail use user@domain.com

Notes:
  - Emails are temporary and will expire after some time
  - Check inbox regularly as old messages may be deleted
  - To send emails, configure SMTP in $ENV_FILE (see README)
  - The service is free but has no guarantees

HELP
}

# Main function
main() {
    init_data_dir
    
    case "${1:-help}" in
        create)
            create_email
            ;;
        list|ls)
            list_emails
            ;;
        delete|del|rm)
            delete_email "$2"
            ;;
        inbox|check)
            check_inbox "$2"
            ;;
        read|show)
            read_email "$2" "$3"
            ;;
        send|compose)
            send_email "$2" "$3" "$4"
            ;;
        use|set)
            set_current "$2"
            ;;
        current)
            show_current
            ;;
        clear)
            clear_all
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            print_msg "$RED" "‚ùå Unknown command: $1"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

main "$@"
